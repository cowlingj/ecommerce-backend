# SECRETS:
# HELM_REPO_PREFIX - url for the helm repo (/helm/repo is appended to complete full url)
# HELM_REPO_BRANCH - branch for push to helm repo
# GIT_USER_NAME - username for git account to use
# GIT_USER_EMAIL - email for git account to use
# GITHUB_TOKEN - github personal access token (requires permission to commit to repo)
# GCP_SERVICE_KEY - key for gcp service account (backslash sequences must be escaped)
# GCP_PROJECT_ID - gcp project id
# GCP_ZONE - gcp compute zone
# GCP_REGISTRY_PREFIX - the registry prefix to use for gcp container registry (determines storage location)
---

version: 2.1
workflows:
  version: 2

  package:
    jobs:
      - build-cms-main:
          filters:
            branches:
              only: master
      - build-auth-main:
          filters:
            branches:
              only: master
      - build-postgres-client:
          filters:
            branches:
              only: master
      - build-auth-init:
          filters:
            branches:
              only: master
          requires:
            - build-postgres-client
      - build-mongodb-init:
          filters:
            branches:
              only: master

  update_helm_charts:
    jobs:
      - package-helpers:
          filters:
            branches:
              only: master
      - package-elasticsearch:
          filters:
            branches:
              only: master
      - package-postgres:
          filters:
            branches:
              only: master
          requires:
            - package-helpers
      - package-mongodb:
          filters:
            branches:
              only: master
          requires:
            - package-helpers
      - package-cms:
          filters:
            branches:
              only: master
          requires:
            - package-helpers
            - package-mongodb
      - package-auth:
          filters:
            branches:
              only: master
          requires:
            - package-elasticsearch
            - package-postgres
      - package-backend:
          filters:
            branches:
              only: master
          requires:
            - package-auth
            - package-cms
            - package-elasticsearch
            - package-helpers
            - package-mongodb
            - package-postgres
      - generate_index:
          filters:
            branches:
              only: master
          requires:
            - package-auth
            - package-cms
            - package-elasticsearch
            - package-helpers
            - package-mongodb
            - package-postgres
            - package-backend
      - commit_if_different:
          filters:
            branches:
              only: master
          requires:
            - generate_index

executors:
  gcloud:
    shell: /bin/sh -le
    docker:
      - image: google/cloud-sdk
  alpine:
    shell: /bin/sh -leo pipefail
    docker:
      - image: alpine:latest
  git:
    shell: /bin/sh -leo pipefail
    docker:
      - image: alpine/git:1.0.7
  helm:
    shell: /bin/sh -leo pipefail
    docker:
      - image: praqma/helmsman:v1.12.0

jobs:
  build-cms-main:
    executor: gcloud
    steps:
      - docker_package:
          image: "cms.admin"
          path: "cms/main/"
  build-auth-main:
    executor: gcloud
    steps:
      - docker_package:
          image: "auth.admin"
          path: "auth/main/"
  build-postgres-client:
    executor: gcloud
    steps:
      - docker_package:
          image: "client.postgres.data"
          path: "postgres/client/"
  build-auth-init:
    executor: gcloud
    steps:
      - docker_package:
          image: "init.auth.admin"
          path: "auth/init/"
  build-mongodb-init:
    executor: gcloud
    steps:
      - docker_package:
          image: "init.mongodb.data"
          path: "mongodb/init/"

  package-helpers:
    executor: helm
    steps:
      - helm_package:
          path: helm/charts/helpers/
  package-elasticsearch:
    executor: helm
    steps:
      - helm_package:
          path: elasticsearch/charts/elasticsearch/
  package-postgres:
    executor: helm
    steps:
      - helm_package:
          path: postgres/charts/postgres/
  package-mongodb:
    executor: helm
    steps:
      - helm_package:
          path: mongodb/charts/init/
  package-cms:
    executor: helm
    steps:
      - helm_package:
          path: cms/charts/cms/
  package-auth:
    executor: helm
    steps:
      - helm_package:
          path: auth/charts/auth/
  package-backend:
    executor: helm
    steps:
      - helm_package:
          path: helm/charts/ecommerce-backend/
  generate_index:
    executor: helm
    steps:
      - generate_index
  commit_if_different:
    executor: git
    steps:
      - commit_if_workspace_different:
          message: "Update helm repo"

commands:
  docker_package:
    parameters:
      image:
        type: string
      path:
        type: string
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Setup GCP
          command: |
            echo "${GCP_SERVICE_KEY}" | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GCP_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GCP_ZONE}
            gcloud auth configure-docker
      - run:
          name: Docker build
          command: docker build -t tmp << parameters.path >>
      - run:
          name: Set image version
          command: docker inspect tmp --format '{{ index .Config.Labels "version" }}' > /tmp/image_version
      - run:
          name: Docker tag
          command: |
            docker tag tmp "${GCP_REGISTRY_PREFIX}/${GCP_PROJECT_ID}/<< parameters.image >>:$(cat /tmp/image_version)"
            docker tag tmp "${GCP_REGISTRY_PREFIX}/${GCP_PROJECT_ID}/<< parameters.image >>:latest"
      - deploy:
          name: Docker push
          command: |
            docker push "${GCP_REGISTRY_PREFIX}/${GCP_PROJECT_ID}/<< parameters.image >>:$(cat /tmp/image_version)"
            docker push "${GCP_REGISTRY_PREFIX}/${GCP_PROJECT_ID}/<< parameters.image >>:latest"
  helm_package:
    parameters:
      path:
        type: string
    steps:
      - checkout
      - run:
          name: helm init
          command: helm init --client-only
      - run:
          name: helm package
          command: |
            mkdir --parents /tmp/helm/repo
            helm package --dependency-update --destination /tmp/helm/repo/ << parameters.path >>
      - persist_to_workspace:
          root: /tmp/
          paths:
            - "helm/repo/*"
  generate_index:
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: helm repo index
          command: |
            helm repo index --url ${HELM_REPO_PREFIX}/helm/repo/ /tmp/workspace/helm/repo/
            mkdir --parents /tmp/helm/repo
            mv /tmp/workspace/helm/repo/index.yaml /tmp/helm/repo/index.yaml
      - persist_to_workspace:
          root: /tmp/
          paths:
            - "helm/repo/index.yaml"
  commit_if_workspace_different:
    parameters:
      workspace_dir:
        type: string
        default: ""
      src_dir:
        type: string
        default: "."
      message:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: git config
          command: |
            git config user.name "${GIT_USER_NAME}"
            git config user.email "${GIT_USER_EMAIL}"
      - run:
          name: replace files
          command: cp -r /tmp/workspace/<< parameters.workspace_dir >>/* << parameters.src_dir >>
      - run:
          name: possibly commit diff
          command: |
            git add --intent-to-add --all
            if ! git diff --quiet; then
              echo "changes detected, committing"
              git add --all
              git commit --message "[CIRCLE CI] [ci skip] << parameters.message >>"
              git push --quiet \
                https://${GITHUB_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git 2>&1 \
                HEAD:${HELM_REPO_BRANCH} | sed s/${GITHUB_TOKEN}/**********/
            fi
