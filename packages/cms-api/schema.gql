directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE

type _ListAccess {
  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'create' operations.
  NOTE: 'create' can only return a Boolean.
  It is not possible to specify a declarative Where clause for this
  operation
  """
  create: Boolean

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'read' operations.
  """
  read: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'update' operations.
  """
  update: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'delete' operations.
  """
  delete: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'auth' operations.
  """
  auth: JSON
}

type _ListMeta {
  """The Keystone List name"""
  name: String

  """
  Access control configuration for the currently authenticated
  request
  """
  access: _ListAccess

  """Information on the generated GraphQL schema"""
  schema: _ListSchema
}

type _ListSchema {
  """The typename as used in GraphQL queries"""
  type: String

  """
  Top level GraphQL query names which either return this type, or
  provide aggregate information about this type
  """
  queries: [String]

  """
  Information about fields on other types which return this type, or
  provide aggregate information about this type
  """
  relatedFields: [_ListSchemaRelatedFields]
}

type _ListSchemaRelatedFields {
  """The typename as used in GraphQL queries"""
  type: String

  """A list of GraphQL field names"""
  fields: [String]
}

type _QueryMeta {
  count: Int
}

type authenticateUserOutput {
  """ Used to make subsequent authenticated requests by setting this token in a header: 'Authorization: Bearer <token>'. 
  """
  token: String

  """ Retrieve information on the newly authenticated User here. """
  item: User
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

"""DateTime custom scalar represents an ISO 8601 datetime string"""
scalar DateTime

""" A keystone list """
type Event {
  """
  This virtual field will be resolved in one of the following ways (in this order):
   1. Execution of 'labelResolver' set on the Event List config, or
   2. As an alias to the field set on 'labelField' in the Event List config, or
   3. As an alias to a 'name' field on the Event List (if one exists), or
   4. As an alias to the 'id' field on the Event List.
  """
  _label_: String
  id: ID
  start: DateTime
  end: DateTime
  title: String
  description: String
  location: String
  ical: String
}

input EventCreateInput {
  start: DateTime
  end: DateTime
  title: String
  description: String
  location: String
  ical: String
}

input EventsCreateInput {
  data: EventCreateInput
}

input EventsUpdateInput {
  id: ID!
  data: EventUpdateInput
}

input EventUpdateInput {
  start: DateTime
  end: DateTime
  title: String
  description: String
  location: String
  ical: String
}

input EventWhereInput {
  AND: [EventWhereInput]
  OR: [EventWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  start: DateTime
  start_not: DateTime
  start_lt: DateTime
  start_lte: DateTime
  start_gt: DateTime
  start_gte: DateTime
  start_in: [DateTime]
  start_not_in: [DateTime]
  end: DateTime
  end_not: DateTime
  end_lt: DateTime
  end_lte: DateTime
  end_gt: DateTime
  end_gte: DateTime
  end_in: [DateTime]
  end_not_in: [DateTime]
  title: String
  title_not: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  title_i: String
  title_not_i: String
  title_contains_i: String
  title_not_contains_i: String
  title_starts_with_i: String
  title_not_starts_with_i: String
  title_ends_with_i: String
  title_not_ends_with_i: String
  title_in: [String]
  title_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  location: String
  location_not: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  location_i: String
  location_not_i: String
  location_contains_i: String
  location_not_contains_i: String
  location_starts_with_i: String
  location_not_starts_with_i: String
  location_ends_with_i: String
  location_not_ends_with_i: String
  location_in: [String]
  location_not_in: [String]
  ical: String
  ical_not: String
  ical_contains: String
  ical_not_contains: String
  ical_starts_with: String
  ical_not_starts_with: String
  ical_ends_with: String
  ical_not_ends_with: String
  ical_i: String
  ical_not_i: String
  ical_contains_i: String
  ical_not_contains_i: String
  ical_starts_with_i: String
  ical_not_starts_with_i: String
  ical_ends_with_i: String
  ical_not_ends_with_i: String
  ical_in: [String]
  ical_not_in: [String]
}

input EventWhereUniqueInput {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  """ Create a single User item. """
  createUser(data: UserCreateInput): User

  """ Create multiple User items. """
  createUsers(data: [UsersCreateInput]): [User]

  """ Update a single User item by ID. """
  updateUser(id: ID!, data: UserUpdateInput): User

  """ Update multiple User items by ID. """
  updateUsers(data: [UsersUpdateInput]): [User]

  """ Delete a single User item by ID. """
  deleteUser(id: ID!): User

  """ Delete multiple User items by ID. """
  deleteUsers(ids: [ID!]): [User]
  unauthenticateUser: unauthenticateUserOutput

  """ Authenticate and generate a token for a User with the Password Authentication Strategy. 
  """
  authenticateUserWithPassword(username: String, password: String): authenticateUserOutput

  """ Create a single Event item. """
  createEvent(data: EventCreateInput): Event

  """ Create multiple Event items. """
  createEvents(data: [EventsCreateInput]): [Event]

  """ Update a single Event item by ID. """
  updateEvent(id: ID!, data: EventUpdateInput): Event

  """ Update multiple Event items by ID. """
  updateEvents(data: [EventsUpdateInput]): [Event]

  """ Delete a single Event item by ID. """
  deleteEvent(id: ID!): Event

  """ Delete multiple Event items by ID. """
  deleteEvents(ids: [ID!]): [Event]
}

type Query {
  """ Search for all User items which match the where clause. """
  allUsers(where: UserWhereInput, search: String, orderBy: String, first: Int, skip: Int): [User]

  """ Search for the User item with the matching ID. """
  User(where: UserWhereUniqueInput!): User

  """ Perform a meta-query on all User items which match the where clause. """
  _allUsersMeta(where: UserWhereInput, search: String, orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the User list. """
  _UsersMeta: _ListMeta
  authenticatedUser: User

  """ Search for all Event items which match the where clause. """
  allEvents(where: EventWhereInput, search: String, orderBy: String, first: Int, skip: Int): [Event]

  """ Search for the Event item with the matching ID. """
  Event(where: EventWhereUniqueInput!): Event

  """ Perform a meta-query on all Event items which match the where clause. 
  """
  _allEventsMeta(where: EventWhereInput, search: String, orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Event list. """
  _EventsMeta: _ListMeta

  """The version of the Keystone application serving this API."""
  appVersion: String

  """ Retrieve the meta-data for all lists. """
  _ksListsMeta: [_ListMeta]
}

type unauthenticateUserOutput {
  """
  `true` when unauthentication succeeds.
  NOTE: unauthentication always succeeds when the request has an invalid or missing authentication token.
  """
  success: Boolean
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

""" A keystone list """
type User {
  """
  This virtual field will be resolved in one of the following ways (in this order):
   1. Execution of 'labelResolver' set on the User List config, or
   2. As an alias to the field set on 'labelField' in the User List config, or
   3. As an alias to a 'name' field on the User List (if one exists), or
   4. As an alias to the 'id' field on the User List.
  """
  _label_: String
  id: ID
  username: String
  isAdmin: Boolean
  password_is_set: Boolean
}

input UserCreateInput {
  username: String
  isAdmin: Boolean
  password: String
}

input UsersCreateInput {
  data: UserCreateInput
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserUpdateInput {
  username: String
  isAdmin: Boolean
  password: String
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  username: String
  username_not: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  username_i: String
  username_not_i: String
  username_contains_i: String
  username_not_contains_i: String
  username_starts_with_i: String
  username_not_starts_with_i: String
  username_ends_with_i: String
  username_not_ends_with_i: String
  username_in: [String]
  username_not_in: [String]
  isAdmin: Boolean
  isAdmin_not: Boolean
  password_is_set: Boolean
}

input UserWhereUniqueInput {
  id: ID!
}

