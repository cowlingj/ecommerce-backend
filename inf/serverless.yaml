service:
  name: ecommerce-backend-shared

custom:
  stage: ${opt:stage, self:provider.stage, "dev"}
  gatewayFunctionService: gateway-serverless
  gatewayFunctionName: all
  gatewayFunctionArn: 
    !Join 
      - ''
      - - 'arn:aws:lambda:'
        - !Ref AWS::Region
        - ':'
        - !Ref AWS::AccountId
        - :function:${self:custom.gatewayFunctionService}-${self:custom.stage}-${self:custom.gatewayFunctionName}

provider:
  name: 'aws'

resources:
  Resources:
    RestAPI:
      Type: AWS::ApiGateway::RestApi
      Properties: 
        Description: Private API for internal services
        FailOnWarnings: true
        MinimumCompressionSize: 1024
        Name: private-api
        Policy: 
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: "lambda.amazonaws.com"
              Action: execute-api:Invoke
              Resource: "execute-api:/${self:custom.stage}/*"
              Condition:
                StringEquals:
                  "lambda:FunctionArn": ${self:custom.gatewayFunctionArn}         

  Outputs:
    ApiGatewayRestApiId:
      Value: !Ref RestAPI
      Export:
        Name: gw-restApiId

    ApiGatewayRestApiRootResourceId:
      Value: !GetAtt RestAPI.RootResourceId
      Export:
        Name: gw-rootResourceId
