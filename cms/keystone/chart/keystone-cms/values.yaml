replicaCount: 1

## image: configure the images used within the deployment
image:
  main:
    repository: cowlingj/keystone-cms.admin
    tag: latest
    pullPolicy: IfNotPresent
  init:
    repository: cowlingj/init-keystone-cms.admin
    tag: latest
    pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

service:
  nameOverride: ""
  fullnameOverride: ""
  type: ClusterIP
  unauthenticated:
    ## service.unauthenticated.enabled: enabled unauthenticated access to the service
    enabled: true
    ## ## service.unauthenticated.port: port for the unauthenticated endpoint
    port: 80

resources:
  main: {}
  init: {}

nodeSelector: {}

tolerations: []

affinity: {}

## secrets: kubernetes secrets to create or use
## secrets.*.nameOverride: the name of the secret if no fullnameOverride exists (appended to release name)
## secrets.*.fullnameOverride: the name of the secret
## secrets.*.exists: whether the secret already exists or does it need to be created by this chart
## secrets.*.data: yaml data to be  stored in the created secret (when exists: false used to cause secret to be created)
secrets:
  ## secrets.users: kubernetes secret used to store default users
  users:
    nameOverride: "users-secret"
    fullnameOverride: ""
    exists: false
    data:
      users:
          ## secrets.users.data.users.*.username: username to log into the CMS with
        - username: admin
          ## secrets.users.data.users.*.password: password to log into the CMS with
          password: password
          ## secrets.users.data.users.*.isAdmin: whether or not the user is an administrator
          isAdmin: true
  ## secrets.strings: kubernetes secret to store default string resources
  strings:
    nameOverride: "strings-secret"
    fullnameOverride: ""
    exists: false
    data:
      ## secrets.strings.data.*.key: key/id of the resource the resource
      ## secrets.strings.data.*.value: string value for the resource
      strings: []
  ## secrets.mongodbCms: password for mongodb to access the database as the cms
  mongodbCms:
    nameOverride: "mongodb-cms-secret"
    fullnameOverride: ""
    exists: false
    data:
      password: null
  ## secrets.mongodbAdmin: password used to create the CMS database and user if they do not exist (this secret cannot be created with exists: false)
  mongodbAdmin:
    nameOverride: "mongodb-admin-secret"
    fullnameOverride: ""

## env: NODE_ENV environment variable
env: production
## basePath: BASE_PATH environment variable
basePath: ""
## cookieSecret: COOKIE_SECRET environment variable
cookieSecret: null
mongodb:
  ## mongodb.host: hostname for mongodb instance
  host: mongo
  ## mongodb.port: port for mongodb instance
  port: 27017
  cms:
    ## mongodb.cms.username: username for the CMS database user
    username: cms
    ## mongodb.cms.database: database for the CMS user to use
    database: cms
  admin:
    ## mongodb.admin.username: username for the admin database user
    username: root
    ## mongodb.admin.database: database for the admin user to use
    database: admin
features:
  ## features.events: whether events are enabled in the CMS 
  events: true
  ## features.products: whether products are enabled in the CMS
  products: true
  ## features.resources: whether resources are enabled in the CMS
  resources: true

## *.secrets.<secret_name>.nameOverride: the name of the secret if no fullnameOverride exists (appended to release name)
## *.secrets.<secret_name>.fullnameOverride: the name of the secret
## *.secrets.<secret_name>.exists: whether the secret already exists or does it need to be created by this chart
## *.secrets.<secret_name>.data: yaml data to be stored in the created secret (when exists: false used to cause secret to be created)

authAdmin:
  ## authAdmin.enabled: protects admin interface with authorization code flow
  enabled: false
  image:
    repository: keycloak/keycloak-gatekeeper
    tag: "latest"
    pullPolicy: IfNotPresent
  service:
    port: 8080
  ## authAdmin.secrets: kubernetes secrets for authAdmin
  secrets:
    ## authAdmin.secrets.clientSecret: client secret for the keystone to use for auth
    clientSecret:
      nameOverride: "keystone-cms-admin-auth-client-secret"
      fullnameOverride: ""
      exists: false
      data:
        client_secret: ""
    ## authAdmin.secrets.encryptionKey: encryption key for sessions
    encryptionKey:
      nameOverride: "keystone-cms-admin-auth-encryption-key"
      fullnameOverride: ""
      exists: false
      data:
        ## authAdmin.secrets.encryptionKey.data.encryptionKey: 32 character encryption key (key will be extended or truncated to 32 characters) 
        encryption_key: ""
  config:
    ## authAdmin.config.clientSecretSecretKey: key for oauth client secret
    clientSecretSecretKey: "client_secret"
    ## authAdmin.config.encryptionKeySecretKey: key for encryption key
    encryptionKeySecretKey: "encryption_key"
    ## authAdmin.config.clientId: oauth client id
    clientId: keystone
    ## authAdmin.config.discoveryUrl: openid connect discovery url (external url)
    discoveryUrl: null
    ## authAdmin.config.redirectionUrl: redirection url back to authentication service 
    redirectionUrl: null
    ## authAdmin.config.proxyUrl: openid connect internal url
    proxyUrl: null
    ## authAdmin.config.secureCookie: whether or not to enable secure cookies (requires https)
    secureCookie: true
    ## authAdmin.config.defaultDeny: deny authorization for routes not in resources
    defaultDeny: true
    ## authAdmin.config.resources: each string is a keycloak gateway resources argument
    resources:
      - "uri=/admin|roles=keystone:admin"
      - "uri=/favicon|white-listed=true"
      - "uri=/graphql|roles=keystone:admin"

authApi:
  ## authAdmin.enabled: protects admin interface with authorization code flow
  enabled: false
  image:
    repository: keycloak/keycloak-gatekeeper
    tag: "latest"
    pullPolicy: IfNotPresent
  service:
    port: 80
  ## authAdmin.secrets: kubernetes secrets for authAdmin
  secrets:
    ## authApi.secrets.clientSecret: client secret for the keystone to use for api auth
    clientSecret:
      nameOverride: "keystone-cms-admin-auth-client-secret"
      fullnameOverride: ""
      exists: false
      data:
        client_secret: ""
    ## authApi.secrets.encryptionKey: encryption key for sessions
    encryptionKey:
      nameOverride: "keystone-cms-api-auth-encryption-key"
      fullnameOverride: ""
      exists: false
      data:
        encryption_key: ""
  config:
    ## authAdmin.config.clientSecretSecretKey: key for oauth client secret
    clientSecretSecretKey: "client_secret"
    ## authAdmin.config.encryptionKeySecretkey: key for encryption key
    encryptionKeySecretKey: "encryption_key"
    ## authAdmin.config.clientId: oauth client id
    clientId: keystone
    ## authAdmin.config.discoveryUrl: openid connect discovery url (external url)
    discoveryUrl: null
    ## authAdmin.config.proxyUrl: openid connect internal url
    proxyUrl: null
    ## authAdmin.config.defaultDeny: deny authorization for routes not in resources
    defaultDeny: true
    ## authAdmin.config.resources: each string is a keycloak gateway resources argument
    resources:
      - "uri=/graphql|roles=keystone:admin"
